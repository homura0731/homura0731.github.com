<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Vue.js - 表單驗證實作]]></title>
      <url>%2F2017%2F09%2Fvue-form-check%2F</url>
      <content type="text"><![CDATA[前言最近覺得Vue還蠻好玩的，剛好我需要挑一個前端框架來玩玩，所以就挑這個囉！ 實作說明整體流程我要用Vue來監控Form所有的值，使用Regular Expression(正規表達式)來驗證是否錯誤，錯誤提示的部分使用Bootstrap 4 簡單範例HTML部分建立一個input數值使用v-model綁在data上，v-bind:class則是顯示錯誤的開關在建立一個invalid-feedback的div，裡面用來放錯誤訊息123456&lt;label for="username"&gt;帳號&lt;/label&gt;&lt;input type="text" class="form-control" name="username" v-bind:class="&#123; 'is-invalid': usernameError &#125;" v-model="username" placeholder="Username"&gt;(最多10個字)&lt;div class="invalid-feedback"&gt; &#123;&#123; userErrMsg &#125;&#125;&lt;/div&gt; Vue部分創建3個Datausername用來繫結輸入的值、usernameError用來控制是否錯誤、userErrMsg用來控制錯誤訊息使用Vue的watch事件用正規表達式檢查是否錯誤123456789101112131415161718192021222324var app = new Vue(&#123; el: '#app', data: &#123; username: '', usernameError: false, userErrMsg: '' &#125;, watch: &#123; username: function () &#123; var isText = /^[a-zA-Z0-9]+$/; if (!isText.test(this.username)) &#123; this.usernameError = true; this.userErrMsg = '請勿包含特殊字元'; &#125; else if (this.username.length &gt; 10) &#123; this.usernameError = true; this.userErrMsg = '請勿超過10個字'; &#125; else &#123; this.usernameError = false; &#125; &#125; &#125;&#125;); 完整實作範例HTML部分12345678910111213141516171819202122232425262728293031&lt;div id="app"&gt; &lt;div class="row"&gt; &lt;div class="form-group"&gt; &lt;label for="username"&gt;帳號&lt;/label&gt; &lt;input type="text" class="form-control" name="username" v-bind:class="&#123; 'is-invalid': usernameError &#125;" v-model="username" placeholder="Username"&gt;(最多10個字) &lt;div class="invalid-feedback"&gt; &#123;&#123; userErrMsg &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="form-group"&gt; &lt;label for=""&gt;密碼&lt;/label&gt; &lt;input type="text" class="form-control" name="password" v-bind:class="&#123; 'is-invalid': passwordError &#125;" v-model="password" placeholder="Password"&gt;(至少6位，小於15位，必須包含大小寫和數字) &lt;div class="invalid-feedback"&gt; &#123;&#123; passErrMsg &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="form-group"&gt; &lt;label for=""&gt;E-Mail&lt;/label&gt; &lt;input type="text" class="form-control" name="email" v-bind:class="&#123; 'is-invalid': emailError &#125;" v-model="email" placeholder="Email"&gt; &lt;div class="invalid-feedback"&gt; &#123;&#123; emailErrMsg &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; JS部分12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364var app = new Vue(&#123; el: '#app', data: &#123; username: '', usernameError: false, userErrMsg: '', password: '', passwordError: false, passErrMsg: '', email: '', emailError: false, emailErrMsg: '' &#125;, watch: &#123; username: function () &#123; var isText = /^[a-zA-Z0-9]+$/; if (!isText.test(this.username)) &#123; this.usernameError = true; this.userErrMsg = '請勿包含特殊字元'; &#125; else if (this.username.length &gt; 10) &#123; this.usernameError = true; this.userErrMsg = '請勿超過10個字'; &#125; else &#123; this.usernameError = false; &#125; &#125;, password: function () &#123; var isText = /^[a-zA-Z0-9]+$/; var inclde = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,15&#125;$/; if (!isText.test(this.password)) &#123; this.passwordError = true; this.passErrMsg = '請勿包含特殊字元'; &#125; else if (this.password.length &lt; 6) &#123; this.passwordError = true; this.passErrMsg = '請勿少於6個字'; &#125; else if (this.password.length &gt; 15) &#123; this.passwordError = true; this.passErrMsg = '請勿超過15個字'; &#125; else if (!include.test(this.password)) &#123; this.passwordError = true; this.passErrMsg = '至少包括一個大小寫字母或數字'; &#125; else &#123; this.passwordError = false; &#125; &#125;, email: function () &#123; var isMail = /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]+$/; if (!isMail.test(this.email)) &#123; this.emailError = true; this.emailErrMsg = 'email格式錯誤'; &#125; else &#123; this.emailError = false; &#125; &#125; &#125;&#125;); 後記表單驗證使用Vue.js之後做起來方便多了，驗證的非常及時，跟Bootstrap搭配起來也非常方便，只要監控的數值改變，Vue.js便會重新渲染，相較自己寫JS按下Submit才檢查來得更即時。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Entity Framawork - 實作資料分頁]]></title>
      <url>%2F2017%2F06%2FEntity-Data-Paging%2F</url>
      <content type="text"><![CDATA[前言其實資料分頁在.net已經有很多好用的套件或是現成物件可以用了，例如WebForm的GridView和MVC的PagedList.Mvc，但是以前我還在寫PHP的時候，其實這些東西完全不需要使用這些東西，只要sql語法就能做到，所以這篇我寫紀錄一下不依賴這些東西就能完成的方法。 資料分頁在 PHP 的作法有使用過PHP的工程師應該都是到MySQL可以使用Limit的方式來限制出現的資料數量來實作分頁。例如以下語法假設我讀第3頁，一次讀10條資料，也就是讀第21~30條的資料1SELECT * FROM Table LIMIT 20,10 簡化的規則變成以下這樣1SELECT * FROM Table LIMIT (pageIndex * pageSize),pageSize pageIndex：是當前分頁索引pageSize：每頁的資料量但是在SQL Server這邊沒有Limit這個描述，該怎麼做呢? 資料分頁在 .Net 的作法SQL在SqlServer這邊沒有Limit那麼好用的方法，但是我們有Top和NOT IN混用也能用出差不多的效果，123456SELECT TOP(pageSize) * FROM Table WHERE id NOT IN ( SELECT TOP(pageIndex * pageSize) FROM Table ORDER BY id DESC )ORDER BY id DESC 雖然複雜點但是效果是差不多，這邊Google過還有蠻多方法的，以上只是其中一種。 LINQ To EntityLINQ則是先用Skip跳過不需要的資料，在使用Take限制取得的資料量，db為我的ADO.NET實體資料庫模型1(from t in db.Table orderby t.Id descending select t).Skip(pageIndex * pageSize).Take(pageSize); LambdaLambda語法大同小異1db.table.OrderByDescending(t =&gt; t.Id).Skip(pageIndex * pageSize).Take(pageSize); 後記其實這些寫法我都是用在API上比較多，大部分的人應該還是都依賴套件的寫法，寫起來會比較快速。 參考資料 http://blog.miniasp.com/post/2007/12/11/Paging-using-simple-T-SQL-in-SQL-Server.aspx https://dotblogs.com.tw/kim66766/2011/04/10/sql-paging-method]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS - Animate.css 好用的CSS動畫函式庫]]></title>
      <url>%2F2017%2F06%2FCss-Animate-Css%2F</url>
      <content type="text"><![CDATA[前言今天上班時發現好玩的Css動畫函式庫 Animate.css，由Daniel Eden製作，Soure Code也有公開是GitHub上面，回家後馬上抓來玩玩看效果還不錯，在這邊紀錄一下筆記。 使用方法先去官網取的Animate.css這隻檔案然後引入自己的網頁裡1&lt;link href="animate.css" rel="stylesheet" type="text/css"&gt; 再來只要修改標籤的class改成要的效果，效果可以看官網的範例，然後再class還要再加上animated就行了例如我要給一行字執行wobble這個特效1&lt;p class="wobble animated"&gt;Test&lt;/p&gt; 這樣就OK了，不過只會執行一次喔!想要多次當然只能依靠JS幫忙簡單寫一下，例如我要按下一個Button讓文字產生效果Html部分12&lt;button id="testBtn"&gt;Test&lt;/buttion&gt;&lt;p id="testWord"&gt;Test Word&lt;/p&gt; JS部分(我很懶直接用Jquery了)123$('#testBtn').click(function()&#123; $('#testWord').attr("class","wobble animated");&#125;); 簡單範例因為同事問過是不是能用在圖片，所以我就用圖片當範例不用文字了! 效果： wobble fadeInRight jello hinge 執行動畫 $('#test').click(function(){ $('#animateTest').attr("class",$('#selAnime').val() + " animated" ).delay(500); setTimeout(animateCacel, 1000); }); function animateCacel() { $('#animateTest').attr("class", ""); } 後記這個真的蠻好玩的，配合JS都能自己做出簡單的輪播，對後端工程師來說真的很好上手。 附錄 Animate.css的GitHub]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Entity Framework - 日期區間查詢使用字串日期]]></title>
      <url>%2F2017%2F05%2FEntity-DataBase-String-Date-select%2F</url>
      <content type="text"><![CDATA[前言其實這應該是使用SQL跳到Entity Framework(以下簡稱EF)的一種不適應，但是如果是新設計的資料庫應該都會使用datetime型態當日期的儲存格式，可是公司的舊的設計方式已經丟出去給客戶上線了，大家應該都知道以前很多人都是使用String型態來儲存日期，但是一到EF這種物件導向式的用法上就出問題了，所以這篇就是紀錄一下我查到的方法。 SQL查詢先做一個假資料如下圖 資料庫資料 我們依照以前SQL的查詢方法以下語法是可以使用的例如要查4/12到4/15的資料1SELECT * FROM Schedule WHERE sDate BETWEEN '2017/04/12' AND '2017/04/15' 使用EF如果只是單純SQL轉成LINQ應該會寫成像下圖這樣 linq查詢錯誤示範 但是物件導向的寫法這樣當然是錯誤的不能string比對string的範圍…. 這邊真的讓我卡了一下，查資料查半天都是錯的，後來發現原來我關鍵字打反了，一直打成linq entity dateTime to string，應該是要查linq entity string to datetime，結果一查果然對了。原來有對應的Method可以解決這問題，使用compare這方法可以解決，程式碼如下 LINQ To Entity 查詢12var Data = from s in db.Schedule where s.sDate.CompareTo("2017/04/12") &gt;=0 &amp;&amp; s.sDate.CompareTo("2017/04/15") &lt;= 0 select s; Lambda 語法1var lambda = db.Schedule.Where(s =&gt; s.sDate.CompareTo("2017/04/12") &gt;= 0 &amp;&amp; s.sDate.CompareTo("2017/04/15") &lt;= 0); 後記最近再把大量sql語法查詢都改成LINQ To Entity，這樣不但好Debug，又能防止SQL Injection 真的方便多了。 參考文獻 https://stackoverflow.com/questions/7740693/big-issue-in-converting-string-to-datetime-using-linq-to-entities]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Cordova - 環境安裝2 - Android篇]]></title>
      <url>%2F2017%2F05%2FCordova-Set_up-Android%2F</url>
      <content type="text"><![CDATA[前言繼上篇Cordova安裝之後，接下來要說一下怎麼編譯成apk和使用android模擬器運行，其實我在學會使用Apache Cordova的編譯器之前，都是用Adobe Phonegap的線上編譯器，其實用久真的不是很好用，還是能在自己的PC編譯比較好，那就廢話不多說進入實作吧。 實作幫專案添加android platform使用以下指令1$ cordova platform add android 添加android platform 成功的話專案下的platforms資料夾底下會多出一個android資料夾 添加android platform 成功 使用android 模擬器模擬使用以下指令1$ cordova run android 然後應該會看到以下錯誤訊息，因為還沒設置android sdk的path 執行android模擬器失敗 設置Android_Home和Android的path對我的電腦右鍵內容-&gt;進階系統設定-&gt;進階-&gt;環境變數環境變數在windows上分2種一種是指對使用者(上面)，一種是對全部使用者(下面)，這邊編輯使用者就好了! path設定1 然後找出自己sdk的安裝位置，然後新增的2個值，指向platform-tools和tools這2個位置，如果是win7的話記得都要在後面加上;，我這邊是win10比較高級有UI可以用.. path設定2 再新增一個ANDROID_HOME變數指向android-sdk根目錄 path設定2 設置完成後記得關掉命令提示字元(終端機)，因為他不會自己重讀path一定要重開，我第一次就笨笨的設好了為啥還抓不到…然後在執行一次剛剛的指令1$ cordova run android 應該會有抓不完jdk，然後又丟新錯誤給我 path設定3 添加licenses這步我記得在win7是沒這問題，不知道是不是新版sdk有什麼問題，google了一下用這2行指令解決12$ mkdir "%ANDROID_HOME%\licenses"$ echo |set /p="8933bad161af4178b1185d1a37fbf41ea5269c55" &gt; "%ANDROID_HOME%\licenses\android-sdk-license" 然後正常來說應該就行了，但是win10很討厭把資料夾的權限鎖住了，造成以下錯誤訊息 系統權限 打開sdk資料夾權限這邊先用系統管理員權限打開cmd，然後指向android-sdk根目錄，輸入以下指令1$ chmod 777 Android 輸入完後就能修改資料夾權限了 執行及編譯成apk到這步我是沒問題了，如果還有問題可能是sdk的platform設定有問題，個人公司的win7碰到的，有問題去目錄底下的AVD Manager.exe設定一下目標平台然後再執行一次1$ cordova run android 成功後如下圖結果 模擬成功 然後編譯apk指令1$ cordova build android 編譯後可以再專案目錄底下找到apk apk編譯 後記其實工作時我並沒有成功過使用模擬器，只有編譯成apk，工作的電腦好像沒有Hype-V的功能連模擬器都不能用，在家用win10果然可以用，搞了好久終於設定完成!(累癱) 參考文獻 Apach Cordova官網文件 stackoverflow]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Cordova - 環境安裝]]></title>
      <url>%2F2017%2F04%2FCordova-Set_up%2F</url>
      <content type="text"><![CDATA[前言什麼是Cordova?Cordova是一種讓網頁工程師不需要學會手機程式原生語言(例如Java和objecive-C)，也能寫出手機App的一種網頁前端框架，不管是iOS或是Android平台，只要你會HTML、CSS、Javasript就OK了。 Cordova的演變來簡單說說Cordova的演變Cordova的前身叫PhoneGap，原本是Nitobi開發的，後來被Adobe收購後改名叫做Adobe PhoneGap，Adobe又把代碼捐給Apache基金會，但保留商標所有權，Apache這邊則是改叫另一個名稱叫Apache Cordova。基本上Adobe PhoneGap和Apache Cordova的基底都是Cordova，所以兩邊的寫的程式碼可以共通是沒問題，不過platform建議是用同一邊寫的，然後兩邊環境有什麼不同也大概說一下Adobe PhoneGap這邊是要付費的而且編譯器是在雲端上編輯，沒付費的話還是能用，只是線上的專案只能創建一個，可以拿到的軟體部分只有模擬器的部分，Apache Cordova這邊則是編譯和模擬器全都有，這邊以Apache Cordova為主。 實作事前準備工具 Node.js Android SDK 安裝Cordova首先開啟自己的cmd安裝，Mac OS可能會有權限問題 npm前面記得加sudo1$ npm install -g cordova 裝好之後就能使用以下指令創建專案了1$ cordova create 專案名稱 再來我們要幫專案加入使用平台，我們一般會先用瀏覽器看，所以我們先裝browser這個platform，還有不要忘記指向自己的專案資料夾底下1$ cordova platform add browser 然後就能用我們的瀏覽器來跑了1$ cordova run browser 執行成功會自動開啟瀏覽器，然後按F12開啟開發人員模式，切成手機模式瀏覽，如下圖 執行browser 後記其實Cordova這框架是老闆想寫App但是沒人會，所以找來老師上了幾堂簡單的App課程，當時教得是Adobe PhoneGap，其實不知道為什麼不是教Apache Cordva，這個能做的事情明明比較多，後來想想好像是因為Adobe PhoneGap有圖形介面，大概是考慮了這問題，反正就因為這樣就莫名其妙開始使用了這框架，編譯成Android之前會在另外寫一篇，就先這樣啦! 參考文獻 維基百科 Adobe PhoneGap官網 Apach Cordova官網]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Google API - 圖形驗證reCAPTCHA使用C#]]></title>
      <url>%2F2017%2F04%2FGoogle-Api-reCAPTCHA-C_sharp%2F</url>
      <content type="text"><![CDATA[前言由於最近遇到有學生暴力破解公司寫的校園平台，至於為什麼會被破解，因為當初的人沒有寫驗證類的機制(汗)，於是只好馬上開始幫忙把登入頁面重新寫一遍，要擋暴力破解的方法第一個想到的就是驗證碼，稍微google了一下發現普通的驗證碼還不少都被破解，找了半天覺得Google的reCAPTCHA還不錯，於是就決定使用這個了，然後就開始說明吧! 開始實作reCAPTCHA註冊首先要去官方註冊 註冊連結點這邊因為我們要在自己的機子測試所以label和Domains都填localhost 註冊 註冊完會得到一組Site key和一組Secret key 註冊成功 reCAPTCHA的驗證流程 驗證流程圖 驗證流程我用小畫家隨便畫了一下，大概是像上面那樣 程式實作前端部分先來看看 官方文件解釋文件寫了很多，但是我覺得不是很重要，我們直接實作第二個範例12345678910111213141516171819202122232425&lt;html&gt; &lt;head&gt; &lt;title&gt;reCAPTCHA&lt;/title&gt; &lt;script type="text/javascript"&gt; // 驗證成功後執行 var onSubmit = function(token) &#123; $('#captchaToken').val() = token; &#125;; var onloadCallback = function() &#123; grecaptcha.render('reCAPTCHA', &#123; 'sitekey': '自己的site_key', // 這邊填寫自己的site_key 'callback': onSubmit // 執行成功後onSubmit變數接收 &#125;); &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form method="POST"&gt; &lt;div id="reCAPTCHA"&gt;&lt;/div&gt; &lt;input id="captchaToken" name="captchaToken" type="hidden" /&gt; &lt;input name="submit" type="submit" /&gt; &lt;/form&gt; &lt;script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&amp;render=explicit" async defer&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 範例我有稍微改寫了一下，然後開始解說，我有在裡面加一個hidden的input，驗證成功後剛剛建立的input會接收回傳的token，然後使用者登入後就會把token傳回到後端 後端部分再來看看官方的後端文件 官方文件解釋2前面一堆廢話就不用看了，直接看API Request和API Response的部分我們需要POST三個值到https://www.google.com/recaptcha/api/siteverify這位置上，然後官方丟回驗證是否成功的JSON字串回來。然後就來開始實作吧! 1234567891011121314151617181920212223242526272829303132// 確認是否有Token回傳回來if (Request.Form["captchaToken"] == "")&#123; Msg.Text = "請確認是否為機器人";&#125;else&#123; // 建立一個HttpWebRequest網址指向Google的驗證API var req = (HttpWebRequest)HttpWebRequest.Create("https://www.google.com/recaptcha/api/siteverify"); // Post的資料 // secret:secret_key // response:回傳的Token // remoteip:設定的Domain Name string posStr = "secret=自己的secret_key&amp;response=" + Request.Form["captchaToken"] + "&amp;remoteip=" + Request.Url.Host; byte[] byteStr = Encoding.UTF8.GetBytes(posStr); req.Method = "POST"; req.ContentType = "application/x-www-form-urlencoded"; // 把要Post資料寫進HttpWebRequest using (Stream streamArr = req.GetRequestStream()) &#123; streamArr.Write(byteStr, 0, byteStr.Length); &#125; // 取得回傳資料 using (var res = (HttpWebResponse)req.GetResponse()) &#123; using (StreamReader getJson = new StreamReader(res.GetResponseStream())) &#123; string json = getJson.ReadToEnd(); Msg.Text = json; &#125; &#125;&#125; 我們用C#模擬HTML的form POST給google API認證，Msg物件則是是用來存放訊息用的，如果成功就會變跟下圖一樣 驗證成功圖 如果錯誤的話success會是false。 補充reCAPTCHA申請完後再進去設定裡會多一個Advanced Settings，可以用來調整驗證通過的難度 驗證難度設定 後記其實這個API算簡單才花1天就做好了，Google登入這個還比較難，官方文件寫得亂七八糟，還好這個寫得很清楚流程又簡單，就當是又學到一個好東西(完)。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo - 文章分類方法]]></title>
      <url>%2F2017%2F04%2FHexo-folder-category%2F</url>
      <content type="text"><![CDATA[前言雖然Hexo這框架我才用幾天，但發現文章都集中在source/_post 底下這樣文章只要一多起來一定很難管理，所以這篇就來記錄一下管理的方法 管理方法官方文件的做法官方建議在產生文章加上日期在.md檔案名稱上去_config.yml底下修改new_post_name設定1new_post_name: :year-:month-:day-:title.md 個人做法官方那樣做確實比較好管理，但是我還是覺得都在同一個資料夾下實在太亂了所以自己想到一個比較好的方法就是用改成資料夾管理，一個月跟一個資料夾，這樣分類方便多首先得先把預設設定日期資料夾分類先關閉，一樣_config.yml底下1new_post_name: :year/:month/:title.md 如果沒有那月份的資料夾指令輸入完會自動建立]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo - 指令和設定筆記]]></title>
      <url>%2F2017%2F04%2FHexo-Command-Line-Note%2F</url>
      <content type="text"><![CDATA[前言首先先來寫一篇Hexo常用指令集和一些常會去調的設定，不然老是去翻官方文件也蠻麻煩的 常用指令集啟動伺服器1$ hexo server 建立新文章1$ hexo new "文章名" 產生後並佈署到github(第一次用時一直只有產生，結果因為檔案沒更新一直傳不上去..)1$ hexo deploy --generate hexo套件安裝(例如我的themes需要hexo-until)1$ npm install --save hexo-util 複製themes1$ git clone github位置 themes/主題資料夾名稱 設定相關新增分類頁面(標籤同方法)1.新增一個頁面1$ hexo new page categories 2.設定頁面屬性1type: "categories" 3.去thems資料夾的_config.yml，設定頁面1categories: /categories 佈署佈署到github時，需要先設定根目錄下的_config.yml12345deploy: type: git repo: github: https://github.com/github帳號/github帳號.github.com.git branch: master 成功的話會跳出github登入視窗，登入後應該就成功了 後記之後還有需要會在不定時更新]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Blog開張]]></title>
      <url>%2F2017%2F04%2FNew-Blog%2F</url>
      <content type="text"><![CDATA[紀念的第一篇的文章(完)]]></content>
    </entry>

    
  
  
</search>
